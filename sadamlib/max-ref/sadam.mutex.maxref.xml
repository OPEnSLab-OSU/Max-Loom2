<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This is an automatically generated file. DO NOT EDIT THIS FILE DIRECTLY. Rather, use the _ref.xml files found in the 'edits' folder.-->
<c74object name="sadam.mutex">
	<digest>
		Mutual exclusion (semaphore) object
	</digest>
	<description>
		<o>
			sadam.mutex
		</o>
		will help you managing the access of shared resources in your patch using semaphores. A semaphore can be locked and released, and while locked, it will prevent messages from passing through. Each semaphore must have an unique name, and instances of <o>sadam.mutex</o> with the same name will access the same semaphore. Each mutex has two modes, they can be either locker or releaser instances to the same semaphore. A locker object will test for each incoming message whether the semaphore is locked and if not, it will lock the semaphore and pass the message to the appropriate outlet. Releaser objects will release the semaphore each time a message arrives to their inlet.
	</description>
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">
			Ádám Siska (sales@sadam.hu)
		</metadata>
		<metadata name="tag">
			Max
		</metadata>
		<metadata name="tag">
			Data
		</metadata>
	</metadatalist>
	<!--INLETS-->
	<inletlist>
		<inlet id="0" name="INLET_NAME">
			<digest>
				Messages that will lock/release the semaphore.
			</digest>
			<description>
				Messages that will lock/release the semaphore.
			</description>
		</inlet>
	</inletlist>
	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" name="OUTLET_NAME">
			<digest>
				(anything) Messages that locked successfully or released the semaphore.
			</digest>
			<description>
				(anything) Messages that locked successfully or released the semaphore.
			</description>
		</outlet>
		<outlet id="1" name="OUTLET_NAME">
			<digest>
				(anything) Only in locking mode: Messages that were unable to lock the semaphore (which means that the semaphore has already been locked by another message and waits for a release).
			</digest>
			<description>
				(anything) Only in locking mode: Messages that were unable to lock the semaphore (which means that the semaphore has already been locked by another message and waits for a release).
			</description>
		</outlet>
	</outletlist>
	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="name" type="symbol" optional="1">
			<digest>
				The name of the semaphore to bind to.
			</digest>
			<description>
				If a name is set, the mutex object will bind to the semaphore with the given name. Note that you won't be able to alter this property. Although it is not obligatory to set a name, a mutex object not binding to a semaphore doesn't have much sense.
			</description>
		</objarg>
		<objarg name="releaser" type="int" optional="1">
			<digest>
				Whether the current object is a locker or a releaser for the associated semaphore.
			</digest>
			<description>
				If set to 0 (default), the object will act as a locker. If set to 1, the object will be a releaser. Note that you won't be able to alter this property.
			</description>
		</objarg>
	</objarglist>
	<!--MESSAGES-->
	<methodlist>
		<method name="anything">
			<arglist />
			<digest>
				If the object is in locking mode, incoming messages will be routed between the left and right outlets according to the state of the semaphore. If the semaphore was not locked when the message arrived, it would lock the associated semaphore and output the message on the left outlet. Otherwise the message will be routed to the right outlet. In releasing mode, every incoming message will be echoed to the outlet and will unlock the associated semaphore (if it was in locked state).
			</digest>
			<description>
				If the object is in locking mode, incoming messages will be routed between the left and right outlets according to the state of the semaphore. If the semaphore was not locked when the message arrived, it would lock the associated semaphore and output the message on the left outlet. Otherwise the message will be routed to the right outlet. In releasing mode, every incoming message will be echoed to the outlet and will unlock the associated semaphore (if it was in locked state).
			</description>
		</method>
	</methodlist>
	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="name" get="0" set="1" type="symbol" size="1">
			<digest>
				The name of the semaphore to bind to.
			</digest>
			<description>
				If a name is set, the mutex object will bind to the semaphore with the given name. Note that you won't be able to alter this property. Although it is not obligatory to set a name, a mutex object not binding to a semaphore doesn't have much sense.
			</description>
		</attribute>
		<attribute name="releaser" get="0" set="1" type="int" size="1">
			<digest>
				Whether the current object is a locker or a releaser for the associated semaphore.
			</digest>
			<description>
				If set to 0 (default), the object will act as a locker. If set to 1, the object will be a releaser. Note that you won't be able to alter this property.
			</description>
		</attribute>
	</attributelist>
	<!--EXAMPLE-->
	<examplelist>
		<example img="sadam.mutex.png" caption="In this example we have an external OSC-capable controller that will respond to queries. With a semaphore, it is easy to ensure that it won't get a new query before answering an older one." />
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="gate" />
		<seealso name="onebang" />
	</seealsolist>
</c74object>
