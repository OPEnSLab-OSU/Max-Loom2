<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This is an automatically generated file. DO NOT EDIT THIS FILE DIRECTLY. Rather, use the _ref.xml files found in the 'edits' folder.-->
<c74object name="sadam.dom">
	<digest>
		A Document Object Model (DOM) interface for Max.
	</digest>
	<description>
		<o>
			sadam.dom
		</o>
		will create, read, store or even modify DOM trees. The DOM is one of the possible representations of the contents of an XML document (see http://www.w3.org/TR/DOM-Level-2-Core/). The object internally uses the default Java DOM parser that comes as an instance of <m>javax.xml.parsers.DocumentBuilderFactory</m>, bringing all the power and almost all of the functionality of a W3C-certified DOM parser to MaxMSP. The kind of <m>Node</m>s currently not handled by <o>sadam.dom</o> are: <m>Comment</m>, <m>Entity</m>, <m>EntityReference</m>, <m>Notation</m> and <m>ProcessingInstruction</m>.<br />
		<br />
		When an XML is parsed, the object will assign a unique ID to each <m>Element</m> of the document, called the <m>Element Index</m>. This index won't get stored and changes each time when the order of Elements in the XML is modified (either by inserting or removing Elements). However, using the Element Index is the preferred (and in most cases, the only) way to address a given element in the XML. The Element Index is sent out the rightmost outlet each time an element is accessed. The Element Index of the Document Element is always 0, the rest of the Elements get their index in their 'order of appearence'. This means that even if an Element is being inserted or removed, the Index of the Elements that come earlier in the Document won't change.<br />
		<br />
		When querying Attributes, Text, or CDATA nodes, the requested data will be sent out the appropriate outlets in right-to-left order (in case of Attributes, if more than one Attribute is requested, they will be sent to the output as a sequence like AttributeName1-AttributeValue1-AttributeName2-AttributeValue2-...-AttributeNameN-AttributeValueN, alternating on the appropriate outlets) followed by an error code. When querying Elements, the result will be sent out as a sequence (from right to left) consisting of the Element Index, the Tree Depth of the Element (the Document Element is at level 0, its children are at level 1 etc.), the Element's Tag Name, the Attributes, and finally the Text Content (which is a concatenation of all Text and CDATA nodes).<br />
		<br />
		The leftmost outlet serves as an error outlet. After each command sent to the object, an error code is being sent back through this outlet at the end of the execution of the given command. A negative value means that the command could not be executed successfully, while <m>0</m> means success. In some cases (typically when one or more <m>Elements</m> are queried) the error outlet reports the number of <m>Elements</m> successfully returned.<br />
		<br />
		<m>sadam.dom</m> and <m>sadam.sax</m> are both W3C compliant XML parsers, however, this means some overhead in terms of resources. If you need a lightweight, fast XML parser and you can live with some limitations regarding W3C compliance, consider using <m>sadam.rapidXML</m>.<br />
		This object was commissioned by Georg Hajdu for the MaxScore project. See <a href="http://www.computermusicnotation.com">http://www.computermusicnotation.com</a>.
	</description>
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">
			Ádám Siska (sales@sadam.hu)
		</metadata>
		<metadata name="tag">
			Max
		</metadata>
		<metadata name="tag">
			Data
		</metadata>
	</metadatalist>
	<!--ARGUMENTS-->
	<objarglist />
	<!--MESSAGES-->
	<methodlist>
		<method name="anything">
			<arglist />
			<digest>
				TEXT_HERE
			</digest>
			<description>
				The object will collect all incoming messages and concatenate them. When sending a <m>bang</m>, the object will try to parse the messages received since the previous <m>bang</m> as a single XML.
			</description>
		</method>
		<method name="appendCDATA">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
				<arg name="Content" type="symbol" optional="0" id="1" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Appends a CDATA Section to the end of the text content of an <m>Element</m>.
			</description>
		</method>
		<method name="appendChild">
			<arglist>
				<arg name="Parent Element Index" type="int" optional="0" id="0" />
				<arg name="New Tag's Name" type="symbol" optional="0" id="1" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Appends a new <m>Element</m> to the end of the list of children of the given parent <m>Element</m> with the given tag name.
			</description>
		</method>
		<method name="appendChildNS">
			<arglist>
				<arg name="Parent Element Index" type="int" optional="0" id="0" />
				<arg name="New Tag's Namespace URI" type="symbol" optional="0" id="1" />
				<arg name="New Tag's Name" type="symbol" optional="0" id="2" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Appends a new <m>Element</m> to the end of the list of children of the given parent <m>Element</m> with the given tag name in the given namespace.
			</description>
		</method>
		<method name="appendText">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
				<arg name="Content" type="symbol" optional="0" id="1" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Appends additional text to the end of the text content of an <m>Element</m>.
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				TEXT_HERE
			</digest>
			<description>
				The object will collect all incoming messages and concatenate them. When sending a <m>bang</m>, the object will try to parse the messages received since the previous <m>bang</m> as a single XML.
			</description>
		</method>
		<method name="clear">
			<arglist />
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Clears the buffer that collects the incoming messages that could later be parsed.
			</description>
		</method>
		<method name="createDocument">
			<arglist>
				<arg name="Document Element Name" type="symbol" optional="0" id="0" />
				<arg name="Qualified Name" type="symbol" optional="1" id="1" />
				<arg name="Public ID" type="symbol" optional="1" id="2" />
				<arg name="System ID" type="symbol" optional="1" id="3" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Creates a new Document where the Document Element will have the given name. The Qualified name, Public ID and System ID of the Document Type can be set as optional strings.
			</description>
		</method>
		<method name="createDocumentNS">
			<arglist>
				<arg name="Document Element Namespace" type="symbol" optional="0" id="0" />
				<arg name="Document Element Name" type="symbol" optional="0" id="1" />
				<arg name="Qualified Name" type="symbol" optional="1" id="2" />
				<arg name="Public ID" type="symbol" optional="1" id="3" />
				<arg name="System ID" type="symbol" optional="1" id="4" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Creates a new Document where the Document Element will have the given name in the given XML namespace. The Qualified name, Public ID and System ID of the Document Type can be set as optional strings.
			</description>
		</method>
		<method name="getAttribute">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
				<arg name="Attribute Name" type="symbol" optional="0" id="1" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Sends out the value of the Attribute with the given name of the specified Element.
			</description>
		</method>
		<method name="getAttributeNS">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
				<arg name="Attribute Namespace" type="symbol" optional="0" id="1" />
				<arg name="Attribute Name" type="symbol" optional="0" id="2" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Sends out the value of the Attribute with the given name in the given namespace of the specified Element.
			</description>
		</method>
		<method name="getChildNodes">
			<arglist>
				<arg name="Element Index" type="int" optional="1" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Sends out all the child Elements of the given Element. If no Element Index is specified, it will output the children of the Document Element.
			</description>
		</method>
		<method name="getChildNodesByTagName">
			<arglist>
				<arg name="Element Index" type="int" optional="1" id="0" />
				<arg name="Tag Name" type="symbol" optional="0" id="1" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Sends out all the child Elements of the given Element with the given name. If no Element Index is specified, it will output the children with the given name of the Document Element.
			</description>
		</method>
		<method name="getElement">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Sends out the Element with the given Index.
			</description>
		</method>
		<method name="getElementsByTagName">
			<arglist>
				<arg name="Element Index" type="int" optional="1" id="0" />
				<arg name="Tag Name" type="symbol" optional="0" id="1" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Sends out all the Elements with a given name that belong to the tree fragment of the given Element. If no Element Index is specified, it will output all the Elements with the given name in the whole DOM tree.
			</description>
		</method>
		<method name="getElementsByTagNameNS">
			<arglist>
				<arg name="Element Index" type="int" optional="1" id="0" />
				<arg name="Namespace" type="symbol" optional="0" id="1" />
				<arg name="Tag Name" type="symbol" optional="0" id="2" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Sends out all the Elements with a given name in the given namespace that belong to the tree fragment of the given Element. If no Element Index is specified, it will output all the Elements with the given name in the given namespace in the whole DOM tree.
			</description>
		</method>
		<method name="getFirstChild">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Sends out the first child of the given Element, if any. If no Index is present, it will send out the first child of the Document Element.
			</description>
		</method>
		<method name="getLastChild">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Sends out the last child of the given Element, if any. If no Index is present, it will send out the last child of the Document Element.
			</description>
		</method>
		<method name="getNextSibling">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Sends out the Element immediately following the given Element in the list of children of the parent node of the given Element.
			</description>
		</method>
		<method name="getParentNode">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Sends out the parent of the given Element.
			</description>
		</method>
		<method name="getPreviousSibling">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Sends out the Element immediately preceeding the given Element in the list of children of the parent node of the given Element.
			</description>
		</method>
		<method name="getText">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Sends out the text value of the given Element. If there are more text nodes associated with the given Element (like a mixture of CDATA and Text nodes), they will be concatenated into a single symbol.
			</description>
		</method>
		<method name="getTree">
			<arglist>
				<arg name="Element Index" type="int" optional="1" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Sends out all the Elements in the tree-fragment of the given Element. If no argument is specified, it sends out the whole DOM tree.
			</description>
		</method>
		<method name="insertBefore">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
				<arg name="Tag Name" type="symbol" optional="0" id="1" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Inserts a new Element with the given name just before the given Element (so that the newly inserted element would have the given Index).
			</description>
		</method>
		<method name="insertBeforeNS">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
				<arg name="Namespace" type="symbol" optional="0" id="1" />
				<arg name="Tag Name" type="symbol" optional="0" id="2" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Inserts a new Element with the given name in the given namespace just before the given Element (so that the newly inserted element would have the given Index).
			</description>
		</method>
		<method name="load">
			<arglist>
				<arg name="XML" type="list" optional="0" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Parses the XML given as an argument.
			</description>
		</method>
		<method name="prependCDATA">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
				<arg name="Content" type="symbol" optional="0" id="1" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Prepends a CDATA Section to the beginning of the text content of an <m>Element</m>.
			</description>
		</method>
		<method name="prependText">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
				<arg name="Content" type="symbol" optional="0" id="1" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Prepends additional text to the beginning of the text content of an <m>Element</m>.
			</description>
		</method>
		<method name="print">
			<arglist>
				<arg name="Element Index" type="int" optional="1" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Prints a tree fragment starting with the given Elements in the Max window. If no Index is given, it prints the full document.
			</description>
		</method>
		<method name="read">
			<arglist>
				<arg name="File Name" type="symbol" optional="1" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Reads an XML into the object. If no filename is given, it lets the user select one.
			</description>
		</method>
		<method name="readagain">
			<arglist />
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Reloads the last read XML. If there was no XML read, it lets the user select one.
			</description>
		</method>
		<method name="removeAttribute">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
				<arg name="Attribute Name" type="symbol" optional="0" id="1" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Removes an Attribute with the given name from the specified Element.
			</description>
		</method>
		<method name="removeAttributeNS">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
				<arg name="Attribute Namespace" type="symbol" optional="0" id="1" />
				<arg name="Attribute Name" type="symbol" optional="0" id="2" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Removes an Attribute with the given name in the given namespace from the specified Element.
			</description>
		</method>
		<method name="removeAttributes">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Removes all Attribute from the specified Element.
			</description>
		</method>
		<method name="removeChildNodes">
			<arglist>
				<arg name="Parent Index" type="int" optional="0" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Removes all child Elements from the specified Element.
			</description>
		</method>
		<method name="removeChildNodesByTagName">
			<arglist>
				<arg name="Parent Index" type="int" optional="0" id="0" />
				<arg name="Tag Name" type="symbol" optional="0" id="1" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Removes all child Elements with the given name from the specified Element.
			</description>
		</method>
		<method name="removeElement">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Removes the specified Element from the DOM tree.
			</description>
		</method>
		<method name="removeElementByTagName">
			<arglist>
				<arg name="Parent Index" type="int" optional="1" id="0" />
				<arg name="Tag Name" type="symbol" optional="0" id="1" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Removes all Elements with the given name from the tree-fragment of the specified Element. If no parent Element is specified, it removes all Elements with the given name from the DOM tree.
			</description>
		</method>
		<method name="removeElementByTagNameNS">
			<arglist>
				<arg name="Parent Index" type="int" optional="1" id="0" />
				<arg name="Namespace" type="symbol" optional="0" id="1" />
				<arg name="Tag Name" type="symbol" optional="0" id="2" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Removes all Elements with the given name in the given namespace from the tree-fragment of the specified Element. If no parent Element is specified, it removes all Elements with the given name in the given namespace from the DOM tree.
			</description>
		</method>
		<method name="removeText">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Removes all text content (including CDATA sections, if any) from the specified Element.
			</description>
		</method>
		<method name="setAttribute">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
				<arg name="Attribute Name" type="symbol" optional="0" id="1" />
				<arg name="Attribute Value" type="symbol" optional="0" id="2" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Sets the value of the Attribute with the given name of the specified Element. If no Attribute exists with the given name, a new one is created.
			</description>
		</method>
		<method name="setAttributeNS">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
				<arg name="Attribute Namespace" type="symbol" optional="0" id="1" />
				<arg name="Attribute Name" type="symbol" optional="0" id="2" />
				<arg name="Attribute Value" type="symbol" optional="0" id="3" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Sets the value of the Attribute with the given name in the given namespace of the specified Element. If no Attribute exists with the given name in the given namespace, a new one is created.
			</description>
		</method>
		<method name="setCDATA">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
				<arg name="Text" type="symbol" optional="0" id="1" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Sets the text value of the given Element as a CDATA section. If a textual content (a text or a CDATA section) is already set, these are removed first.
			</description>
		</method>
		<method name="setText">
			<arglist>
				<arg name="Element Index" type="int" optional="0" id="0" />
				<arg name="Text" type="symbol" optional="0" id="1" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Sets the text value of the given Element. If a textual content (a text or a CDATA section) is already set, these are removed first.
			</description>
		</method>
		<method name="trim">
			<arglist>
				<arg name="Element Index" type="int" optional="1" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Removes all white space from the tree-fragment of the given Element. If no Index is set, white spaces will be removed from the entire Document.
			</description>
		</method>
		<method name="write">
			<arglist>
				<arg name="File Name" type="symbol" optional="1" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Writes an XML to the disk. If no filename is given, it lets the user select one.
			</description>
		</method>
		<method name="writeagain">
			<arglist />
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Rewrites the last written XML to the disk. If there was no XML written, it lets the user select one.
			</description>
		</method>
	</methodlist>
	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="redundant" get="0" set="1" type="int" size="1">
			<digest>
				Output Element Index, Tree Depth and Element Name for each Attribute and Element Text Content.
			</digest>
			<description>
				Enables (1) or disables (0) the reduntant state of the 
				<o>
					sadam.dom
				</o>
				object. The default is 0 (disabled). When enabled, each Attribute (or Element Text Content) output will be preceeded by sending the Element Index, Tree Depth and Element Name values.
			</description>
		</attribute>
		<attribute name="symbolOutput" get="0" set="1" type="int" size="1">
			<digest>
				Output texts as single <m>symbol</m>s.
			</digest>
			<description>
				When set to (1), all Element Text Content and Attribute Value fields will be sent out as single symbols. When set to (0), which is the default setting, the output will be a Max list.
			</description>
		</attribute>
	</attributelist>
	<!--EXAMPLE-->
	<examplelist>
		<example img="sadam.dom.png" caption="It can be solved, though..." />
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="sadam.empty" />
		<seealso name="sadam.rapidXML" />
		<seealso name="sadam.sax" />
	</seealsolist>
</c74object>
