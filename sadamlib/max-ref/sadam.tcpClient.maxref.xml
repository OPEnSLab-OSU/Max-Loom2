<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This is an automatically generated file. DO NOT EDIT THIS FILE DIRECTLY. Rather, use the _ref.xml files found in the 'edits' folder.-->
<c74object name="sadam.tcpClient">
	<digest>
		Bidirectional TCP client
	</digest>
	<description>
		<o>
			sadam.tcpClient
		</o>
		will open a TCP connection to a specified IP address on a specified port and will send and receive arbitrary information through this connection. It communicates via pure binary data (either by sending bytes directly to the object or by registering it to a binary stream represented by
		<o>
			sadam.stream</o>), representing each byte as a number between 0 and 255.
	</description>
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">
			Ádám Siska (sales@sadam.hu)
		</metadata>
		<metadata name="tag">
			Max
		</metadata>
		<metadata name="tag">
			Data
		</metadata>
	</metadatalist>
	<!--INLETS-->
	<inletlist>
		<inlet id="0" name="INLET_NAME">
			<digest>
				Various messages to set address, port etc. and send data.
			</digest>
			<description>
				Various messages to set address, port etc. and send data.
			</description>
		</inlet>
	</inletlist>
	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" name="OUTLET_NAME">
            <digest>
                (list) List of received bytes.
			</digest>
            <description>
                (list) List of received bytes.
			</description>
		</outlet>
		<outlet id="1" name="OUTLET_NAME">
			<digest>
				(int) Error code (0 on success). It also sends the <m>connected</m> and <m>disconnected</m> messages when a connection is established or dropped.
			</digest>
			<description>
				(int) Error code (0 on success). It also sends the <m>connected</m> and <m>disconnected</m> messages when a connection is established or dropped.
			</description>
		</outlet>
	</outletlist>
	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="host" type="symbol" optional="1">
			<digest>
				Host name.
			</digest>
			<description>
				Sets the recipient address. It can be any valid IP address or domain name.
			</description>
		</objarg>
		<objarg name="port" type="int" optional="1">
			<digest>
				Port number.
			</digest>
			<description>
				Sets the recipient port number. Valid port numbers are between 0 and 65535.
			</description>
		</objarg>
	</objarglist>
	<!--MESSAGES-->
	<methodlist>
		<method name="address">
			<arglist>
				<arg name="host" type="symbol" optional="0" id="0" />
			</arglist>
			<digest>
				See
				<m>
					host
				</m>
				message.
			</digest>
			<description>
				See
				<m>
					host
				</m>
				message.
			</description>
		</method>
		<method name="bind_listener">
			<arglist>
				<arg name="stream name" type="symbol" optional="1" id="0" />
			</arglist>
			<digest>
				Without an argument, it will unregister all previously registered listener binary streams. If an argument is present, it will also register the stream with the given name to the object as a listener stream. If a listener stream is registered, each time a new binary sequence arrives, first it will be added to the end of the registered stream and then the stream will be cleared.
			</digest>
			<description>
				Without an argument, it will unregister all previously registered listener binary streams. If an argument is present, it will also register the stream with the given name to the object as a listener stream. If a listener stream is registered, each time a new binary sequence arrives, first it will be added to the end of the registered stream and then the stream will be cleared.
			</description>
		</method>
		<method name="bind_sender">
			<arglist>
				<arg name="stream name" type="symbol" optional="1" id="0" />
			</arglist>
			<digest>
				Without an argument, it will unregister all previously registered sender binary streams. If an argument is present, it will also register the stream with the given name to the object as a sender stream. If a sender stream is registered, each time the stream is cleared, its content will be sent out to the network.
			</digest>
			<description>
				Without an argument, it will unregister all previously registered sender binary streams. If an argument is present, it will also register the stream with the given name to the object as a sender stream. If a sender stream is registered, each time the stream is cleared, its content will be sent out to the network.
			</description>
		</method>
		<method name="buffer">
			<arglist>
				<arg name="data" type="int" optional="0" id="0" />
			</arglist>
			<digest>
				Sets the size of the TCP cache in bytes. This is the maximum length of arriving messages. Note that, even if you create a huge receiver buffer, the actual maximum length of your message will be affected by every server on the network between you and the sender.
			</digest>
			<description>
				Sets the size of the TCP cache in bytes. This is the maximum length of arriving messages. Note that, even if you create a huge receiver buffer, the actual maximum length of your message will be affected by every server on the network between you and the sender.
			</description>
		</method>
		<method name="connect">
			<arglist />
			<digest>
				Attempts to open a TCP connection to the specified host on the specified port. If a connection has been established previously to another server, it will be closed first. Also, any pending transmissions will be cancelled.
			</digest>
			<description>
				Attempts to open a TCP connection to the specified host on the specified port. If a connection has been established previously to another server, it will be closed first. Also, any pending transmissions will be cancelled.
			</description>
		</method>
		<method name="disconnect">
			<arglist />
			<digest>
				Closes any alive TCP connection and cancels all transmissions.
			</digest>
			<description>
				Closes any alive TCP connection and cancels all transmissions.
			</description>
		</method>
		<method name="host">
			<arglist>
				<arg name="host" type="symbol" optional="0" id="0" />
			</arglist>
			<digest>
				Sets the host where the connection should be established. Can be any valid IP address or domain name.
			</digest>
			<description>
				Sets the host where the connection should be established. Can be any valid IP address or domain name.
			</description>
		</method>
		<method name="int">
			<arglist>
				<arg name="data" type="int" optional="0" id="0" />
			</arglist>
			<digest>
				Sends the incoming number as a single byte to the network on the specified port to the specified host. The value is clipped to the region [0x00, 0xFF].
			</digest>
			<description>
				Sends the incoming number as a single byte to the network on the specified port to the specified host. The value is clipped to the region [0x00, 0xFF].
			</description>
		</method>
		<method name="list">
			<arglist>
				<arg name="data" type="list" optional="0" id="0" />
			</arglist>
			<digest>
				Sends the incoming numbers as single bytes to the network on the specified port to the specified host. The values are clipped to the region [0x00, 0xFF].
			</digest>
			<description>
				Sends the incoming numbers as single bytes to the network on the specified port to the specified host. The values are clipped to the region [0x00, 0xFF].
			</description>
		</method>
		<method name="port">
			<arglist>
				<arg name="port" type="int" optional="0" id="0" />
			</arglist>
			<digest>
				Sets the port on which the connection should be established. Valid range is from 0 to 65535.
			</digest>
			<description>
				Sets the port on which the connection should be established. Valid range is from 0 to 65535.
			</description>
		</method>
		<method name="register_listener">
			<arglist>
				<arg name="stream name" type="symbol" optional="0" id="0" />
			</arglist>
			<digest>
				Registers the stream with the given name to the object as a listener stream. More than one sender stream can be registered to the same object. Unlike the message
				<m>
					bind_listener
				</m>
				, it will not unregister other (already registered) listener streams.
			</digest>
			<description>
				Registers the stream with the given name to the object as a listener stream. More than one sender stream can be registered to the same object. Unlike the message
				<m>
					bind_listener
				</m>
				, it will not unregister other (already registered) listener streams.
			</description>
		</method>
		<method name="register_sender">
			<arglist>
				<arg name="stream name" type="symbol" optional="0" id="0" />
			</arglist>
			<digest>
				Registers the stream with the given name to the object as a sender stream. More than one sender stream can be registered to the same object. Unlike the message
				<m>
					bind_sender
				</m>
				, it will not unregister other (already registered) sender streams.
			</digest>
			<description>
				Registers the stream with the given name to the object as a sender stream. More than one sender stream can be registered to the same object. Unlike the message
				<m>
					bind_sender
				</m>
				, it will not unregister other (already registered) sender streams.
			</description>
		</method>
		<method name="unregister_listener">
			<arglist>
				<arg name="stream name" type="symbol" optional="0" id="0" />
			</arglist>
			<digest>
				Unregisters the listener stream with the given name from the object.
			</digest>
			<description>
				Unregisters the listener stream with the given name from the object.
			</description>
		</method>
		<method name="unregister_sender">
			<arglist>
				<arg name="stream name" type="symbol" optional="0" id="0" />
			</arglist>
			<digest>
				Unregisters the sender stream with the given name from the object.
			</digest>
			<description>
				Unregisters the sender stream with the given name from the object.
			</description>
		</method>
	</methodlist>
	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="verbose" get="0" set="1" type="int" size="1">
			<digest>
				If non-zero, it will report activity to the Max window.
			</digest>
			<description>
				If non-zero, it will report activity to the Max window. Default value is (1).
			</description>
		</attribute>
		<attribute name="psh" get="0" set="1" type="int" size="1">
			<digest>
				Set the PSH (Push) bit.
			</digest>
			<description>
				When set to (1), outgoing messages will have the PSH bit set, hence Nagle's algorithm will be disabled. WARNING: use this feature only if you know what you're doing. Under normal circumstances, the PSH bit should not be set. Default value is (0).
			</description>
		</attribute>
	</attributelist>
	<!--EXAMPLE-->
	<examplelist>
		<example img="sadam.tcpClient.png" caption="Establish a connection to an SMTP server from Max." />
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
        <seealso name="sadam.stream" />
        <seealso name="sadam.tcpReceiver" />
        <seealso name="sadam.tcpSender" />
        <seealso name="sadam.tcpServer" />
        <seealso name="sadam.udpClient" />
        <seealso name="sadam.udpReceiver" />
        <seealso name="sadam.udpSender" />
	</seealsolist>
</c74object>
