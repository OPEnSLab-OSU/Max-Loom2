<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This is an automatically generated file. DO NOT EDIT THIS FILE DIRECTLY. Rather, use the _ref.xml files found in the 'edits' folder.-->
<c74object name="sadam.toBytes">
	<digest>
		Convert numbers into a sequence of bytes
	</digest>
	<description>
		<o>
			sadam.toBytes
		</o>
		will convert an integer, a floating-point number or a numeric list into their binary representation. The output consists of a list of bytes (integers between 0 and 255), which can be fed into any of the binary networking objects of the library. As network communication is usually big-endian, while most desktop machines are little-endians, the object is capable of convert between these formats.
	</description>
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">
			Ádám Siska (sales@sadam.hu)
		</metadata>
		<metadata name="tag">
			Max
		</metadata>
		<metadata name="tag">
			Data
		</metadata>
	</metadatalist>
	<!--INLETS-->
	<inletlist>
		<inlet id="0" name="INLET_NAME">
			<digest>
				(int/float) Incoming numbers to be converted.
			</digest>
			<description>
				(int/float) Incoming numbers to be converted.
			</description>
		</inlet>
	</inletlist>
	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" name="OUTLET_NAME">
			<digest>
				(list) List of bytes after conversion.
			</digest>
			<description>
				(list) List of bytes after conversion.
			</description>
		</outlet>
	</outletlist>
	<!--ARGUMENTS-->
	<objarglist />
	<!--MESSAGES-->
	<methodlist>
		<method name="float">
			<arglist>
				<arg name="data" type="float" optional="0" id="0" />
			</arglist>
			<digest>
				Converts the incoming number into its binary representation and outputs the bytes as a list of integers between 0 and 255.
			</digest>
			<description>
				Converts the incoming number into its binary representation and outputs the bytes as a list of integers between 0 and 255.
			</description>
		</method>
		<method name="int">
			<arglist>
				<arg name="data" type="int" optional="0" id="0" />
			</arglist>
			<digest>
				Converts the incoming number into its binary representation and outputs the bytes as a list of integers between 0 and 255.
			</digest>
			<description>
				Converts the incoming number into its binary representation and outputs the bytes as a list of integers between 0 and 255.
			</description>
		</method>
		<method name="list">
			<arglist>
				<arg name="data" type="list" optional="0" id="0" />
			</arglist>
			<digest>
				Converts each number in the list one-by-one into its binary representation, then outputs a single list containing the full sequence of all bytes.
			</digest>
			<description>
				Converts each number in the list one-by-one into its binary representation, then outputs a single list containing the full sequence of all bytes.
			</description>
		</method>
	</methodlist>
	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="endian" get="0" set="1" type="int" size="1">
			<digest>
				Set the endianness of the output.
			</digest>
			<description>
				Sets the ordering of the bytes in the output array. Supported values are big-endian, little-endian and the host machine's native ordering. Note that endianness for floating-point numbers is not standardised, hence the byte sequences generated by this object for floating-point numbers may or may not work on other systems. Default value is big-endian.
			</description>
		</attribute>
		<attribute name="format" get="0" set="1" type="int" size="1">
			<digest>
				Set the format of the incoming numbers.
			</digest>
			<description>
				Set the format of the incoming numbers. All numbers (integers as well as floating-point numbers) will be converted to the specified format before aquiring their binary representation. Currently, the following formats are supported: signed and unsigned integers of 8, 16, 32 and 64 bits and IEEE floating-point numbers of 32 and 64 bits. Default value is 32-bit signed integer.
			</description>
		</attribute>
	</attributelist>
	<!--EXAMPLE-->
	<examplelist>
		<example img="sadam.toBytes.png" caption="Concatenate two bytes into a word." />
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="sadam.fromBytes" />
		<seealso name="sadam.stream" />
		<seealso name="sadam.tcpClient" />
		<seealso name="sadam.tcpReceiver" />
		<seealso name="sadam.tcpSender" />
		<seealso name="sadam.udpReceiver" />
		<seealso name="sadam.udpSender" />
	</seealsolist>
</c74object>
