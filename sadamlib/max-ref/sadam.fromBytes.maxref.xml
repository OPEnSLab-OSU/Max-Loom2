<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This is an automatically generated file. DO NOT EDIT THIS FILE DIRECTLY. Rather, use the _ref.xml files found in the 'edits' folder.-->
<c74object name="sadam.fromBytes">
	<digest>
		Convert a sequence of bytes into numbers
	</digest>
	<description>
		<o>
			sadam.fromBytes
		</o>
		will convert a list of bytes (integers between 0 and 255) into integers and/or floating-point numbers. This is useful, for example, if an external device is sending data to Max in binary format (for example, by using the networking objects of the library). As network communication is usually big-endian, while most desktop machines are little-endians, the object is capable of convert between these formats.
	</description>
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">
			Ádám Siska (sales@sadam.hu)
		</metadata>
		<metadata name="tag">
			Max
		</metadata>
		<metadata name="tag">
			Data
		</metadata>
	</metadatalist>
	<!--INLETS-->
	<inletlist>
		<inlet id="0" name="INLET_NAME">
			<digest>
				(list) List of bytes to be converted.
			</digest>
			<description>
				(list) List of bytes to be converted.
			</description>
		</inlet>
	</inletlist>
	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" name="OUTLET_NAME">
			<digest>
				(int/float) Numbers after conversion.
			</digest>
			<description>
				(int/float) Numbers after conversion.
			</description>
		</outlet>
	</outletlist>
	<!--ARGUMENTS-->
	<objarglist />
	<!--MESSAGES-->
	<methodlist>
		<method name="float">
			<arglist>
				<arg name="data" type="float" optional="0" id="0" />
			</arglist>
			<digest>
				Adds a byte to the incoming sequence of bytes. The incoming bytes are stored in an internal buffer which will be converted into a single number once its size reaches the number of bytes required by the representation of the actual format. Incoming values are clipped to the region [0x00 0xFF].
			</digest>
			<description>
				Adds a byte to the incoming sequence of bytes. The incoming bytes are stored in an internal buffer which will be converted into a single number once its size reaches the number of bytes required by the representation of the actual format. Incoming values are clipped to the region [0x00 0xFF].
			</description>
		</method>
		<method name="int">
			<arglist>
				<arg name="data" type="int" optional="0" id="0" />
			</arglist>
			<digest>
				Adds a byte to the incoming sequence of bytes. The incoming bytes are stored in an internal buffer which will be converted into a single number once its size reaches the number of bytes required by the representation of the actual format. Incoming values are clipped to the region [0x00 0xFF].
			</digest>
			<description>
				Adds a byte to the incoming sequence of bytes. The incoming bytes are stored in an internal buffer which will be converted into a single number once its size reaches the number of bytes required by the representation of the actual format. Incoming values are clipped to the region [0x00 0xFF].
			</description>
		</method>
		<method name="list">
			<arglist>
				<arg name="data" type="list" optional="0" id="0" />
			</arglist>
			<digest>
				Adds bytes to the incoming sequence of bytes. The incoming bytes are stored in an internal buffer which will be converted into a single number once its size reaches the number of bytes required by the representation of the actual format. Incoming values are clipped to the region [0x00 0xFF].
			</digest>
			<description>
				Adds bytes to the incoming sequence of bytes. The incoming bytes are stored in an internal buffer which will be converted into a single number once its size reaches the number of bytes required by the representation of the actual format. Incoming values are clipped to the region [0x00 0xFF].
			</description>
		</method>
	</methodlist>
	<!--ATTRIBUTES-->
	<attributelist>
		<attribute name="endian" get="0" set="1" type="int" size="1">
			<digest>
				Set the endianness of the input.
			</digest>
			<description>
				Sets the ordering in which the bytes of the input array are interpreted. Supported values are big-endian, little-endian and the host machine's native ordering. Note that endianness for floating-point numbers is not standardised, hence the object may or may not decode correctly the byte sequences generated for floating-point numbers by other systems. Default value is big-endian.
			</description>
		</attribute>
		<attribute name="format" get="0" set="1" type="int" size="1">
			<digest>
				Set the format of the outgoing numbers.
			</digest>
			<description>
				Set the format of the outgoing numbers. The incoming byte sequence will be converted to numeric values of this format. Currently, the following formats are supported: signed and unsigned integers of 8, 16, 32 and 64 bits and IEEE floating-point numbers of 32 and 64 bits. Default value is 32-bit signed integer.
			</description>
		</attribute>
	</attributelist>
	<!--EXAMPLE-->
	<examplelist>
		<example img="sadam.fromBytes.png" caption="Split a word into two bytes." />
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="sadam.toBytes" />
		<seealso name="sadam.stream" />
		<seealso name="sadam.tcpClient" />
		<seealso name="sadam.tcpReceiver" />
		<seealso name="sadam.tcpSender" />
		<seealso name="sadam.udpReceiver" />
		<seealso name="sadam.udpSender" />
	</seealsolist>
</c74object>
