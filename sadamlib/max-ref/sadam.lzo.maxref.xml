<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This is an automatically generated file. DO NOT EDIT THIS FILE DIRECTLY. Rather, use the _ref.xml files found in the 'edits' folder.-->
<c74object name="sadam.lzo">
	<digest>
		Lossless data compression and decompression using the LZO library
	</digest>
	<description>
		<o>
			sadam.lzo
		</o>
		will compress and decompress losslessly any arbitrary message you send it. The behaviour (compressor/decompressor) is set by the first argument. The compressed result is a single message that may contain any ASCII value (except 0), so caution should be taken, specially if the result is used outside the native Max world (for example if you pass it to MXJ or you plan to store it in a file on the file system). For these cases you might find useful to encode the result with
		<o>
			sadam.base64
		</o>.<br />
		This object was commissioned by Georg Hajdu for the Quintet.net platform. See <a href="http://www.quintet.net">http://www.quintet.net</a>.
	</description>
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">
			Ádám Siska (sales@sadam.hu)
		</metadata>
		<metadata name="tag">
			Max
		</metadata>
		<metadata name="tag">
			Data
		</metadata>
	</metadatalist>
	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="object type selector" type="symbol" optional="1">
			<digest>
				TEXT_HERE
			</digest>
			<description>
				If a
				<m>
					symbol
				</m>
				argument is specifyed for
				<o>
					sadam.lzo
				</o>
				and its value is
				<m>
					compress
				</m>
				then the object will act as a compressor. In any other case (including the case when no
				<m>
					symbol
				</m>
				argument is present) the object will act as decompressor.
				<br />
				<br />
				The inlets and outlets of the object are created depending on the type (compressor/decompressor). When compressing, there are two inlets, the right one for collecting incoming data (which can be of any standard Max type) and the left one for triggering compression. When decompressing there's only one inlet for receiving the compressed data. In both cases there are two outlets, the left one sends the compressed/decompressed data (depending on type) and the right one outputs information about the procedures (compression ratio or error code depending on type).
			</description>
		</objarg>
		<objarg name="internal buffer size" type="int" optional="1">
			<digest>
				TEXT_HERE
			</digest>
			<description>
				An
				<m>
					int
				</m>
				argument will set the internal compression/decompression buffer size of
				<o>
					sadam.lzo
				</o>
				(in bytes). The default value is
				<m>
					8192
				</m>
				. Note that the internal buffer has a minimal size of 69 bytes, if a smaller size is given, the object won't be created. Also keep in mind that the decompressor object must have an internal buffer that has at least as many bytes as the internal buffer of the compressor object that compressed the message to decompress. For example, a message that was compressed using a compressor with a buffer of 8192 bytes won't decompress with a decompressor that has only 1024 bytes of internal memory.
			</description>
		</objarg>
		<objarg name="registered streams" type="symbol" optional="1">
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Any additional
				<m>
					symbol
				</m>
				argument registers a binary stream to the object (note that the first argument would never specify a stream. If the first argument is not a number and is not the
				<m>
					compressor
				</m>
				keyword then it is interpreted as a keyword for telling the object that is should behave as a decompressor). In compressor mode the content of the compressed buffer is sent to the stream each time a compression happens. In decompressor mode the object will decompress anything arriving on any of the registered streams.
			</description>
		</objarg>
	</objarglist>
	<!--MESSAGES-->
	<methodlist>
		<method name="anything">
			<arglist />
			<digest>
				TEXT_HERE
			</digest>
			<description>
				In right inlet: in compressor mode, the messages that should be compressed.
			</description>
		</method>
		<method name="bang">
			<arglist />
			<digest>
				TEXT_HERE
			</digest>
			<description>
				In left inlet: in compressor mode, triggers a compression. In decompressor mode, (re)triggers decompression of the last received message.
				<br />
				<br />
				In compressor mode, if the object's internal buffer fills up, an automated compression event occurs even if there was no
				<m>
				bang
				</m>
				received on the left inlet. The purpose of this is preventing overrun of the internal buffer.
			</description>
		</method>
		<method name="symbol">
			<arglist />
			<digest>
				TEXT_HERE
			</digest>
			<description>
				In left inlet: in decompressor mode, the message that should be decompressed (messages that were output by an other
				<o>
					sadam.lzo
				</o>
				object set to compressor mode).
			</description>
		</method>
		<method name="register">
			<arglist>
				<arg name="stream name" type="symbol" optional="0" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Registers the binary stream with the given name.
			</description>
		</method>
		<method name="unregister">
			<arglist>
				<arg name="stream name" type="symbol" optional="0" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Unregisters the binary stream with the given name.
			</description>
		</method>
		<method name="bind">
			<arglist>
				<arg name="stream name" type="symbol" optional="1" id="0" />
			</arglist>
			<digest>
				TEXT_HERE
			</digest>
			<description>
				Registers the binary stream with the given name and unregisters all other binary streams. If invoked without specifying a name, it will unregister all streams.
			</description>
		</method>
	</methodlist>
	<!--ATTRIBUTES-->
	<!--EXAMPLE-->
	<examplelist>
		<example img="sadam.lzo.png" caption="Whatever data can be compressed. Note that compression is not really efficient if you deal only with a small amount of data" />
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="sadam.base64" />
		<seealso name="sadam.stream" />
		<seealso name="sadam.tcpClient" />
		<seealso name="sadam.tcpReceiver" />
		<seealso name="sadam.tcpSender" />
		<seealso name="sadam.udpReceiver" />
		<seealso name="sadam.udpSender" />
	</seealsolist>
	<misc name="Output">
		<entry name="symbol">
			<description>
				On left outlet: in compressor mode, the compressed data.
			</description>
		</entry>
		<entry name="anything">
			<description>
				On left outlet: in decompressor mode, the decompressed data. They will be returned in the same order and casted to the same types as they were received by the compressor object.
			</description>
		</entry>
		<entry name="int">
			<description>
				On right outlet: in decompressor mode, the error code caused by the last decompression.
				<m>
					0
				</m>
				means there was no error. For a list of error codes, check the documentation of LZO or see the appropriate subpatcher in the help file of
				<o>
					sadam.lzo
				</o>
				.
			</description>
		</entry>
		<entry name="float">
			<description>
				On right outlet: in compressor mode, the compression ratio achieved by the last compression process.
			</description>
		</entry>
	</misc>
</c74object>
