<?xml version="1.0" encoding="utf-8" standalone="yes"?>

<?xml-stylesheet href="./_c74_ref.xsl" type="text/xsl"?>

<!--This is an automatically generated file. DO NOT EDIT THIS FILE DIRECTLY. Rather, use the _ref.xml files found in the 'edits' folder.-->
<c74object name="sadam.stream">
	<digest>
		Read and write binary streams
	</digest>
	<description>
		<o>
			sadam.stream
		</o>
		represents a stream of bytes. By assigning a name to the stream, it is possible to access (read and modify) the same binary buffer by several objects at the same time. The <m>sadam</m> Library contains several stream-aware objects (mainly related to networking tasks). Using streams and the stream-aware objects of the <m>sadam</m> Library makes it really easy to communicate with devices that expect binary data such as most microcontrollers.<br />
		This object was commissioned by Andrea Szigetvári and the Hungarian Computer Music Foundation.
	</description>
	<!--METADATA-->
	<metadatalist>
		<metadata name="author">
			Ádám Siska (sales@sadam.hu)
		</metadata>
		<metadata name="tag">
			Max
		</metadata>
		<metadata name="tag">
			Data
		</metadata>
	</metadatalist>
	<!--INLETS-->
	<inletlist>
		<inlet id="0" name="INLET_NAME">
			<digest>
				Various messages to access or modify the contents of the stream.
			</digest>
			<description>
				Various messages to access or modify the contents of the stream.
			</description>
		</inlet>
	</inletlist>
	<!--OUTLETS-->
	<outletlist>
		<outlet id="0" name="OUTLET_NAME">
			<digest>
				(list) Retrieved data (for messages
				<m>
					getByte
				</m>,
				<m>
					getArray
				</m> and
				<m>
					size
				</m>
				).
			</digest>
			<description>
				(list) Retrieved data (for messages
				<m>
					getByte
				</m>,
				<m>
					getArray
				</m> and
				<m>
					size
				</m>
				).
			</description>
		</outlet>
		<outlet id="1" name="OUTLET_NAME">
			<digest>
				(bang) When data has changed (can be disabled by the
				<m>
					notifyonchange
				</m>
				message).
			</digest>
			<description>
				(bang) When data has changed (can be disabled by the
				<m>
					notifyonchange
				</m>
				message).
			</description>
		</outlet>
		<outlet id="2" name="OUTLET_NAME">
			<digest>
				(list) Content of the stream just before being cleared.
			</digest>
			<description>
				(list) Content of the stream just before being cleared.
			</description>
		</outlet>
	</outletlist>
	<!--ARGUMENTS-->
	<objarglist>
		<objarg name="name" type="any symbol" optional="1">
			<digest>
				The name of the stream.
			</digest>
			<description>
				If a 
				<m>
					symbol
				</m>
				argument is given, it will set the name of the stream. All
				<o>
					sadam.stream
				</o>
				objects which share the same name always share the same data. Other stream-aware third-party externals (like for example
				<o>
					sadam.lzo
				</o>
				) that are registered to this same name will also be able to access or modify the contents of the stream. Withoug an argument
			</description>
		</objarg>
	</objarglist>
	<!--MESSAGES-->
	<methodlist>
		<method name="bang">
			<arglist />
			<digest>
				Outputs the entire stream.
			</digest>
			<description>
				Outputs the entire stream.
			</description>
		</method>
		<method name="clear">
			<arglist />
			<digest>
				Clears the stream.
			</digest>
			<description>
				Clears the stream.
			</description>
		</method>
		<method name="erasearray">
			<arglist>
				<arg name="start position" type="int" optional="0" id="0" />
				<arg name="end position" type="int" optional="0" id="1" />
			</arglist>
			<digest>
				Removes a list of bytes from the stream between the given positions.
			</digest>
			<description>
				Removes a list of bytes from the stream between the given positions.
			</description>
		</method>
		<method name="erasebyte">
			<arglist>
				<arg name="position" type="int" optional="0" id="0" />
			</arglist>
			<digest>
				Removes a byte from the stream at the given position.
			</digest>
			<description>
				Removes a byte from the stream at the given position.
			</description>
		</method>
		<method name="getarray">
			<arglist>
				<arg name="start position" type="int" optional="0" id="0" />
				<arg name="end position" type="int" optional="0" id="1" />
			</arglist>
			<digest>
				Gets a list of bytes from the stream between the given positions and outputs the result on the leftmost outlet. In case of error it won't output anything.
			</digest>
			<description>
				Gets a list of bytes from the stream between the given positions and outputs the result on the leftmost outlet. In case of error it won't output anything.
			</description>
		</method>
		<method name="getbyte">
			<arglist>
				<arg name="position" type="int" optional="0" id="0" />
			</arglist>
			<digest>
				Gets a byte from the stream at the given position and outputs it on the leftmost outlet. If there was an error, it outputs 0.
			</digest>
			<description>
				Gets a byte from the stream at the given position and outputs it on the leftmost outlet. If there was an error, it outputs 0.
			</description>
		</method>
		<method name="insertarray">
			<arglist>
				<arg name="position" type="int" optional="0" id="0" />
				<arg name="bytes to insert" type="list" optional="0" id="1" />
			</arglist>
			<digest>
				Inserts a list of bytes at the given position into the stream. The values are clipped to the range [0; 0xFF].
			</digest>
			<description>
				Inserts a list of bytes at the given position into the stream. The values are clipped to the range [0; 0xFF].
			</description>
		</method>
		<method name="insertbyte">
			<arglist>
				<arg name="position" type="int" optional="0" id="0" />
				<arg name="byte to insert" type="int" optional="0" id="1" />
			</arglist>
			<digest>
				Inserts a byte at the given position into the stream. The value is clipped to the range [0; 0xFF].
			</digest>
			<description>
				Inserts a byte at the given position into the stream. The value is clipped to the range [0; 0xFF].
			</description>
		</method>
		<method name="int">
			<arglist>
				<arg name="byte to add" type="int" optional="0" id="0" />
			</arglist>
			<digest>
				Adds a byte to the end of the stream. The value is clipped to the range [0; 0xFF].
			</digest>
			<description>
				Adds a byte to the end of the stream. The value is clipped to the range [0; 0xFF].
			</description>
		</method>
		<method name="list">
			<arglist>
				<arg name="bytes to add" type="list" optional="0" id="0" />
			</arglist>
			<digest>
				Adds a list of bytes to the end of the stream. The values are clipped to the range [0; 0xFF].
			</digest>
			<description>
				Adds a list of bytes to the end of the stream. The values are clipped to the range [0; 0xFF].
			</description>
		</method>
		<method name="name">
			<arglist>
				<arg name="stream name" type="symbol" optional="1" id="0" />
			</arglist>
			<digest>
				Sets the name of the stream.
			</digest>
			<description>
				Sets the name of the stream. All
				<o>
					sadam.stream
				</o>
				objects which share the same name always share the same data.
			</description>
		</method>
		<method name="notifyonchange">
			<arglist>
				<arg name="enable notifying" type="int" optional="1" id="0" />
			</arglist>
			<digest>
				Enables or disables notifying of changes. When set to 0 (or no parameter present) it will disable notifications, otherwise the stream will notify all registered objects before and after each change made. This affects all streams that share the same name. However, this will not affect the notification sent before and after the stream has been cleared, which can't be disabled.
			</digest>
			<description>
				Enables or disables notifying of changes. When set to 0 (or no parameter present) it will disable notifications, otherwise the stream will notify all registered objects before and after each change made. This affects all streams that share the same name. However, this will not affect the notification sent before and after the stream has been cleared, which can't be disabled.
			</description>
		</method>
		<method name="replacearray">
			<arglist>
				<arg name="start position" type="int" optional="0" id="0" />
				<arg name="end position" type="int" optional="0" id="1" />
				<arg name="bytes to replace" type="list" optional="0" id="2" />
			</arglist>
			<digest>
				Replaces a list of bytes between the given positions in the stream. The values are clipped to the range [0; 0xFF].
			</digest>
			<description>
				Replaces a list of bytes between the given positions in the stream. The values are clipped to the range [0; 0xFF].
			</description>
		</method>
		<method name="replacebyte">
			<arglist>
				<arg name="position" type="int" optional="0" id="0" />
				<arg name="byte to replace" type="int" optional="0" id="1" />
			</arglist>
			<digest>
				Replaces a byte at the given position in the stream. The value is clipped to the range [0; 0xFF].
			</digest>
			<description>
				Replaces a byte at the given position in the stream. The value is clipped to the range [0; 0xFF].
			</description>
		</method>
		<method name="size">
			<arglist />
			<digest>
				Outputs the size of the stream.
			</digest>
			<description>
				Outputs the size of the stream.
			</description>
		</method>
	</methodlist>
	<!--ATTRIBUTES-->
	<!--EXAMPLE-->
	<examplelist>
		<example img="sadam.stream.png" caption="An example for an efficient way to send compressed data through the network." />
	</examplelist>
	<!--SEEALSO-->
	<seealsolist>
		<seealso name="sadam.lzo" />
		<seealso name="sadam.tcpClient" />
		<seealso name="sadam.tcpReceiver" />
		<seealso name="sadam.tcpSender" />
		<seealso name="sadam.udpReceiver" />
		<seealso name="sadam.udpSender" />
	</seealsolist>
</c74object>
